#include "mpi.h"
#include <stdio.h>
#include <math.h>
#include <iostream>
#include <cstdlib>
#include <vector>

int n;
int world_size;
int *myPrimes;
int *othPrimes;
int k;
vector <int> allPrimes;

bool isPrime(int m){
    if(m%2==0){
        return 0;
    }
    for(int i=3;i<sqrt(m);i+=2){
        if(m%i==0)
        return 0;
    }
    return 1;
}

int main(int argc, char *argv[])
{
    cout << "Wprowadz liczbe do sprawdzenia czy pierwsza " << endl;
    cin >> n;

    myPrimes = new int[n/2];
    othPrimes = new int[n/2];

    MPI_Init(NULL,NULL);
    MPI_Comm_size(MPI_COMM_WORLD, &world_size);
    int world_rank;
    MPI_Comm_rank(MPI_COMM_WORLD,&world_rank);

    for(i = n*world_rank/world_size; i< n*(world_rank + 1)/world_size ; i++)
        if(isPrime(i)){
            myPrimes[k++]=i;
            if(world_rank != 0){
                MPI_Send(&k, 1, MPI_INT, 0, 0, MPI_COMM_WORLD);
                MPI_Send(myPrimes, k, MPI_INT, 0, 0, MPI_COMM_WORLD);

            }
            int recv_size;

            if(world_rank == 0){
                for(i=0; i<k; i++)
                allPrimes.push_back(myPrimes[i]);
                delete myPrimes;

                for(i=1; i<world_size; i++){
                    MPI_Recv(&recv_size, 1, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                    cout<< "OTRZYMANO " << recv_size << " liczb pierwszych " << endl;
                    othPrimes=new int [recv_size];
                    MPI_Recv(othPrimes, recvSize, MPI_INT, i, 0, MPI_COMM_WORLD, MPI_STATUS_IGNORE);
                    for(int j=0;j<recv_size, j++)
                        allPrimes.push_back(othPrimes[j]);
                        delete othPrimes;
                }
                cout << "OBLICZONO << allPrimes.size() << " LICZB PIERWSZYCH " << endl;
                for(i=0;i<allPrimes.size();i++)
                cout << allPrimes[i] << "/t";
            }
        MPI_Finalize();
        return 0;
    }



}